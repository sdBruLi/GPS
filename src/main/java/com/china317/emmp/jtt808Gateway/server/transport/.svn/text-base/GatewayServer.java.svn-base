package com.china317.emmp.jtt808Gateway.server.transport;

import java.net.InetSocketAddress;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;

import com.china317.core.codec.jtt808Gateway.GatewayCodecFactory;
import com.china317.emmp.jtt808Gateway.server.common.config.Config;
import com.china317.emmp.jtt808Gateway.server.common.config.ThreadConfig;

public class GatewayServer extends Thread {
	private final static Log		log			= LogFactory.getLog(GatewayServer.class);
	private static GatewayServer	instance	= null;
	private static ThreadConfig		config		= null;
	private NioSocketAcceptor		acceptor	= null;
	private int						port		= 1582;

	private GatewayServer() {
		config = Config.getThreadConfig(GatewayServer.class);
		port = config.getListenPort();
		setName(" face to center server");
		if (config.isRun()) {
			start();
		}
	}

	public static void startThread() {
		if (instance == null) {
			instance = new GatewayServer();
		}
	}

	public static void main(String[] args) {
		startThread();
	}

	@Override
	public void run() {
		ProtocolCodecFilter protocolCodecFilter = new ProtocolCodecFilter(new GatewayCodecFactory());
		GatewayHandler gatewayHandler = new GatewayHandler();
		while (true) {
			try {
				acceptor = new NioSocketAcceptor();
				acceptor.getSessionConfig().setReadBufferSize(4096);
				acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);
				acceptor.setReuseAddress(true);
				acceptor.getFilterChain().addLast("codec", protocolCodecFilter);
				acceptor.setHandler(gatewayHandler);

				acceptor.bind(new InetSocketAddress(port));
				log.info("listen to:" + port + " successful");
				return;
			} catch (Exception e) {
				log.error(e.toString(),e);
				try {
					sleep(10000);
				} catch (Exception e2) {
				}
			}

		}
	}
}
