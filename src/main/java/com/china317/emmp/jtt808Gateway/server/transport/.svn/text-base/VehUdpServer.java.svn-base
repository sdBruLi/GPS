package com.china317.emmp.jtt808Gateway.server.transport;

import java.net.InetSocketAddress;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.transport.socket.DatagramSessionConfig;
import org.apache.mina.transport.socket.nio.NioDatagramAcceptor;

import com.china317.core.codec.jtt808_2011.JT808CodecFactory;
import com.china317.core.distributor.SessionAuthorizationStatus;
import com.china317.emmp.jtt808Gateway.server.common.config.Config;
import com.china317.emmp.jtt808Gateway.server.common.config.ThreadConfig;
import com.china317.emmp.jtt808Gateway.server.processor.CommonProcessor;



public class VehUdpServer {
	private final static Log	log			= LogFactory.getLog(VehUdpServer.class);
	private static VehUdpServer	instance	= null;
	private static ThreadConfig	config		= null;
	private int					port		= 3100;
	
	private VehUdpServer() {
		config = Config.getThreadConfig(VehUdpServer.class);
		port = config.getListenPort();
		if (config.isRun()) {
			NioDatagramAcceptor acceptor = new NioDatagramAcceptor();
			acceptor.getSessionConfig().setReadBufferSize(4096);
			acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);
			acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(new JT808CodecFactory()));
			
			CommonProcessor commonProcessor = new CommonProcessor("JT/T808--2011");
			String[] acceptCommands = commonProcessor.getConfig().getAcceptCommands();//目前没有判断，可以添加到配置文件中自动加载
//			VehHandler vehHandler = new VehHandler();
			VehUdpHandler vehHandler = new VehUdpHandler();
			vehHandler.registerProcessor("JT/T808--2011", commonProcessor, SessionAuthorizationStatus.Both_Session, acceptCommands);
			acceptor.setHandler(vehHandler);
			
			DatagramSessionConfig dcfg = acceptor.getSessionConfig();//建立连接的配置文件  
	        dcfg.setReadBufferSize(4096);//设置接收最大字节默认2048  
	        dcfg.setReceiveBufferSize(1024);//设置输入缓冲区的大小  
	        dcfg.setSendBufferSize(1024);//设置输出缓冲区的大小  
	        dcfg.setReuseAddress(true);//设置每一个非主监听连接的端口可以重用  
			while (true) {
				try {
			        acceptor.bind(new InetSocketAddress(port));//绑定端口  
					log.info("UDP listen to:" + port + " successful");
					return;
				} catch (Exception e) {
					log.error(e.getMessage() + " port:" + port);
				}
			}
		}
	}
	
	public static void startThread() {
		if (instance == null) {
			instance = new VehUdpServer();
		}
	}
	
//	public static void main(String[] args) {
//		VehUdpServer.startThread();
//	}
}
